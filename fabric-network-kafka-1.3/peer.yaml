version: '3.1'

services:

  ##########################################################################################
  #      Orderers                                                                          #
  ##########################################################################################
  orderer1.example.com:
    container_name: orderer1.example.com
    image: hyperledger/fabric-orderer:1.3.0
    environment:
      - ORDERER_GENERAL_LOGLEVEL=ERROR
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=FALSE
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ./data/orderer/orderer1:/var/hyperledger/production/orderer
      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/:/var/hyperledger/orderer/tls
    ports:
      - 17050:7050

#  orderer2.example.com:
#    container_name: orderer2.example.com
#    image: hyperledger/fabric-orderer:1.3.0
#    environment:
#      - ORDERER_GENERAL_LOGLEVEL=ERROR
#      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
#      - ORDERER_GENERAL_GENESISMETHOD=file
#      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
#      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
#      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
#      # enabled TLS
#      - ORDERER_GENERAL_TLS_ENABLED=true
#      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
#      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
#      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
#      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
#      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
#      - ORDERER_KAFKA_VERBOSE=FALSE
#    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
#    command: orderer
#    volumes:
#      - ./data/orderer/orderer2:/var/hyperledger/production/orderer
#      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
#      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/orderer/msp
#      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/:/var/hyperledger/orderer/tls
#    ports:
#      - 17150:7050

  ##########################################################################################
  #      Peer                                                                              #
  ##########################################################################################
  peer1.org1.example.com:
    image: hyperledger/fabric-peer:1.3.0
    container_name: peer1.org1.example.com
    restart: always
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric-network-kafka-13_default
      - CORE_LOGGING_LEVEL=ERROR
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
      - CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=TRUE
      - CORE_PEER_GOSSIP_USELEADERELECTION=TRUE
      - CORE_PEER_GOSSIP_ORGLEADER=FALSE
      - CORE_PEER_PROFILE_ENABLED=FALSE
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
    ports:
      - 17151:7051
      - 17153:7053
      - 17154:7054
    volumes:
      - ./data/peer/peer1:/var/hyperledger/production
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
      - ./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls

#  peer1.org2.example.com:
#    image: hyperledger/fabric-peer:1.3.0
#    container_name: peer1.org2.example.com
#    restart: always
#    environment:
#      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#      # the following setting starts chaincode containers on the same
#      # bridge network as the peers
#      # https://docs.docker.com/compose/networking/
#      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric-network-kafka-13_default
#      - CORE_LOGGING_LEVEL=ERROR
#      - CORE_PEER_ID=peer1.org2.example.com
#      - CORE_PEER_ADDRESS=peer1.org2.example.com:7051
#      - CORE_PEER_CHAINCODEADDRESS=peer1.org2.example.com:7052
#      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
#      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:7051
#      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:7051
#      - CORE_PEER_LOCALMSPID=Org2MSP
#      - CORE_PEER_TLS_ENABLED=TRUE
#      - CORE_PEER_GOSSIP_USELEADERELECTION=TRUE
#      - CORE_PEER_GOSSIP_ORGLEADER=FALSE
#      - CORE_PEER_PROFILE_ENABLED=FALSE
#      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
#      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
#      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
#    ports:
#      - 17251:7051
#      - 17253:7053
#      - 17254:7054
#    volumes:
#      - ./data/peer/peer2:/var/hyperledger/production
#      - /var/run/:/host/var/run/
#      - ./crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
#      - ./crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls

  cli:
    container_name: cli
    image: hyperledger/fabric-tools:1.3.0
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_LOCALMSPTYPE=bccsp
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/client.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/client.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}; sleep $TIMEOUT'
    volumes:
        - /var/run/:/host/var/run/
        - ./chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ./crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls:/etc/hyperledger/fabric/tls
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - orderer1.example.com
      - peer1.org1.example.com